ex1

connected(1,2).
connected(3,4).
connected(5,6).
connected(7,8).
connected(9,10).
connected(12,13).
connected(13,14).
connected(15,16).
connected(17,18).
connected(19,20).
connected(4,1).
connected(6,3).
connected(4,7).
connected(6,11).
connected(14,9).
connected(11,15).
connected(16,12).
connected(14,17).
connected(16,19).

path(X,Y) - connected(X,Y).
path(X,Y) - path(X,Z), connected(Z,Y).

ex2

successor([],[x]).
successor([xT],[xT2])-successor(T,T2).
%sau
%successor(X,[xX]).

plus(L1,L2,R) - append(L1,L2,R).

times([x],L,R)-append([],L,R).
times([xT1],L,R2) - times(T1,L,R), append(R,L,R2).

ex3

element_at([X_],1,X).
element_at([_T],N, R) - Nnew is N-1, element_at(T,Nnew,R).


EX5

%date(Day,Month,Year).
born(jan, date(20,3,1977)).
born(jeroen, date(2,2,1992)).
born(joris, date(17,3,1995)).
born(jelle, date(1,1,2004)).
born(joan, date(24,12,0)).
born(joop, date(30,4,1989)).
born(jannecke, date(17,3,1993)).
born(jaap, date(16,11,1995)).

year(X,R)- born(R,date(_,_,X)).
before(date(D1,M1,Y1),date(D2,M2,Y2)) - Y1  Y2;
                                         Y1 == Y2, M1M2;
                                         Y1 == Y2, M1 == M2, D1D2.

older(Nume,X) - born(Nume,date(D1,M1,Y1)), born(X,date(D2,M2,Y2)),
                 before(date(D1,M1,Y1),date(D2,M2,Y2)).


successor([],[x]) .
successor([H|T],[H|Tr]) :- successor(T,Tr).

plus1(X,Y,Result) :- X = 1, append(X,Y,Result).
plus1([H|T],Y,Result) :- H > 1, plus([H|T],Y,Result), append([H|T],Y,Result).

times([x],L,R):-append([],L,R).
times([x|T1],L,R2) :- times(T1,L,R), append(R,L,R2).


element_at([H|_], Nr, X) :- Nr = 1,
    						X = H.
element_at([_|T], Nr, X) :- Nr > 1, 
    						Nr2 is Nr-1,	
    						element_at(T, Nr2, X).



representation('I', 1).
representation('V', 5).
representation('X', 10).
representation('XL', 40).
representation('L', 50).
representation('C', 100).
representation('M', 1000).

%a) return number for simbol
symbol(X, Value) :- representation(X, Value).

%b) retrun numbers list for simbols list
symbols2numbers([],[]).
symbols2numbers([H|T],[HV|TV]) :- symbol(H, HV),
    							  symbols2numbers(T,TV).

%c) return sum of list s numbers
sum([],0).
sum([H|T],Sum) :- sum(T,Sum2), Sum is Sum2+H.

%d) roman to arabic
%roman2arabic(X,Result)